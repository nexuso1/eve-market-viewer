/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.19.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserInterfaceApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_UserInterfaceApi_H_
#define IO_SWAGGER_CLIENT_API_UserInterfaceApi_H_


#include "../ApiClient.h"

#include "Bad_request.h"
#include "Error_limited.h"
#include "Forbidden.h"
#include "Gateway_timeout.h"
#include "Internal_server_error.h"
#include "New_mail.h"
#include "Object.h"
#include "Service_unavailable.h"
#include "Unauthorized.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  UserInterfaceApi
{
public:
    UserInterfaceApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UserInterfaceApi();
    /// <summary>
    /// Set Autopilot Waypoint
    /// </summary>
    /// <remarks>
    /// Set a solar system as autopilot waypoint  --- Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/legacy/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60; 
    /// </remarks>
    /// <param name="addToBeginning">Whether this solar system should be added to the beginning of all waypoints</param>
    /// <param name="clearOtherWaypoints">Whether clean other waypoints beforing adding this one</param>
    /// <param name="destinationId">The destination to travel to, can be solar system, station or structure&#39;s id</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<void> postUiAutopilotWaypoint(
        bool addToBeginning,
        bool clearOtherWaypoints,
        int64_t destinationId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> token
    );
    /// <summary>
    /// Open Contract Window
    /// </summary>
    /// <remarks>
    /// Open the contract window inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60; 
    /// </remarks>
    /// <param name="contractId">The contract to open</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<void> postUiOpenwindowContract(
        int32_t contractId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> token
    );
    /// <summary>
    /// Open Information Window
    /// </summary>
    /// <remarks>
    /// Open the information window for a character, corporation or alliance inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60; 
    /// </remarks>
    /// <param name="targetId">The target to open</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<void> postUiOpenwindowInformation(
        int32_t targetId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> token
    );
    /// <summary>
    /// Open Market Details
    /// </summary>
    /// <remarks>
    /// Open the market details window for a specific typeID inside the client  --- Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60; 
    /// </remarks>
    /// <param name="typeId">The item type to open in market window</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<void> postUiOpenwindowMarketdetails(
        int32_t typeId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> token
    );
    /// <summary>
    /// Open New Mail Window
    /// </summary>
    /// <remarks>
    /// Open the New Mail window, according to settings from the request if applicable  --- Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60; 
    /// </remarks>
    /// <param name="newMail">The details of mail to create</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<void> postUiOpenwindowNewmail(
        std::shared_ptr<New_mail> newMail,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> token
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_UserInterfaceApi_H_ */

