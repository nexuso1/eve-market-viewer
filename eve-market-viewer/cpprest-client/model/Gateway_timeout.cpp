/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.19.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Gateway_timeout.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Gateway_timeout::Gateway_timeout()
{
    m_Error = utility::conversions::to_string_t("");
    m_Timeout = 0;
    m_TimeoutIsSet = false;
}

Gateway_timeout::~Gateway_timeout()
{
}

void Gateway_timeout::validate()
{
    // TODO: implement validation
}

web::json::value Gateway_timeout::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("error")] = ModelBase::toJson(m_Error);
    if(m_TimeoutIsSet)
    {
        val[utility::conversions::to_string_t("timeout")] = ModelBase::toJson(m_Timeout);
    }

    return val;
}

void Gateway_timeout::fromJson(web::json::value& val)
{
    setError(ModelBase::stringFromJson(val[utility::conversions::to_string_t("error")]));
    if(val.has_field(utility::conversions::to_string_t("timeout")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timeout")];
        if(!fieldValue.is_null())
        {
            setTimeout(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Gateway_timeout::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("error"), m_Error));
    if(m_TimeoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeout"), m_Timeout));
    }
}

void Gateway_timeout::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setError(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("error"))));
    if(multipart->hasContent(utility::conversions::to_string_t("timeout")))
    {
        setTimeout(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeout"))));
    }
}

utility::string_t Gateway_timeout::getError() const
{
    return m_Error;
}


void Gateway_timeout::setError(utility::string_t value)
{
    m_Error = value;
    
}
int32_t Gateway_timeout::getTimeout() const
{
    return m_Timeout;
}


void Gateway_timeout::setTimeout(int32_t value)
{
    m_Timeout = value;
    m_TimeoutIsSet = true;
}
bool Gateway_timeout::timeoutIsSet() const
{
    return m_TimeoutIsSet;
}

void Gateway_timeout::unsetTimeout()
{
    m_TimeoutIsSet = false;
}

}
}
}
}

