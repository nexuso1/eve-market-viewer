/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.19.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UniverseApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_UniverseApi_H_
#define IO_SWAGGER_CLIENT_API_UniverseApi_H_


#include "../ApiClient.h"

#include "../model/Bad_request.h"
#include "../model/Error_limited.h"
#include "../model/Forbidden.h"
#include "../model/Gateway_timeout.h"
#include "../model/Internal_server_error.h"
#include "../Object.h"
#include "../model/Service_unavailable.h"
#include "../model/Unauthorized.h"
#include <vector>
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  UniverseApi
{
public:
    UniverseApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UniverseApi();
    /// <summary>
    /// Get ancestries
    /// </summary>
    /// <remarks>
    /// Get all character ancestries  --- Alternate route: &#x60;/legacy/universe/ancestries/&#x60;  Alternate route: &#x60;/v1/universe/ancestries/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseAncestries(
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get asteroid belt information
    /// </summary>
    /// <remarks>
    /// Get information on an asteroid belt  --- Alternate route: &#x60;/legacy/universe/asteroid_belts/{asteroid_belt_id}/&#x60;  Alternate route: &#x60;/v1/universe/asteroid_belts/{asteroid_belt_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="asteroidBeltId">asteroid_belt_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseAsteroidBeltsAsteroidBeltId(
        int32_t asteroidBeltId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get bloodlines
    /// </summary>
    /// <remarks>
    /// Get a list of bloodlines  --- Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseBloodlines(
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get item categories
    /// </summary>
    /// <remarks>
    /// Get a list of item categories  --- Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/v1/universe/categories/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int32_t>> getUniverseCategories(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get item category information
    /// </summary>
    /// <remarks>
    /// Get information of an item category  --- Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="categoryId">An Eve item category ID</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseCategoriesCategoryId(
        int32_t categoryId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get constellations
    /// </summary>
    /// <remarks>
    /// Get a list of constellations  --- Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/v1/universe/constellations/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int32_t>> getUniverseConstellations(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get constellation information
    /// </summary>
    /// <remarks>
    /// Get information on a constellation  --- Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="constellationId">constellation_id integer</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseConstellationsConstellationId(
        int32_t constellationId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get factions
    /// </summary>
    /// <remarks>
    /// Get a list of factions  --- Alternate route: &#x60;/dev/universe/factions/&#x60;  Alternate route: &#x60;/v2/universe/factions/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseFactions(
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get graphics
    /// </summary>
    /// <remarks>
    /// Get a list of graphics  --- Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/v1/universe/graphics/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int32_t>> getUniverseGraphics(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get graphic information
    /// </summary>
    /// <remarks>
    /// Get information on a graphic  --- Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="graphicId">graphic_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseGraphicsGraphicId(
        int32_t graphicId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get item groups
    /// </summary>
    /// <remarks>
    /// Get a list of item groups  --- Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/v1/universe/groups/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="page">Which page of results to return (optional, default to 1)</param>
    pplx::task<std::vector<int32_t>> getUniverseGroups(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<int32_t> page
    );
    /// <summary>
    /// Get item group information
    /// </summary>
    /// <remarks>
    /// Get information on an item group  --- Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="groupId">An Eve item group ID</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseGroupsGroupId(
        int32_t groupId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get moon information
    /// </summary>
    /// <remarks>
    /// Get information on a moon  --- Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="moonId">moon_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseMoonsMoonId(
        int32_t moonId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get planet information
    /// </summary>
    /// <remarks>
    /// Get information on a planet  --- Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="planetId">planet_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniversePlanetsPlanetId(
        int32_t planetId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get character races
    /// </summary>
    /// <remarks>
    /// Get a list of character races  --- Alternate route: &#x60;/dev/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/v1/universe/races/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseRaces(
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get regions
    /// </summary>
    /// <remarks>
    /// Get a list of regions  --- Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/v1/universe/regions/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int32_t>> getUniverseRegions(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get region information
    /// </summary>
    /// <remarks>
    /// Get information on a region  --- Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="regionId">region_id integer</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseRegionsRegionId(
        int32_t regionId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get stargate information
    /// </summary>
    /// <remarks>
    /// Get information on a stargate  --- Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="stargateId">stargate_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseStargatesStargateId(
        int32_t stargateId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get star information
    /// </summary>
    /// <remarks>
    /// Get information on a star  --- Alternate route: &#x60;/legacy/universe/stars/{star_id}/&#x60;  Alternate route: &#x60;/v1/universe/stars/{star_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="starId">star_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseStarsStarId(
        int32_t starId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get station information
    /// </summary>
    /// <remarks>
    /// Get information on a station  --- Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="stationId">station_id integer</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseStationsStationId(
        int32_t stationId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// List all public structures
    /// </summary>
    /// <remarks>
    /// List all public structures  --- Alternate route: &#x60;/dev/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/v1/universe/structures/&#x60;  --- This route is cached for up to 3600 seconds
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="filter">Only list public structures that have this service online (optional)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int64_t>> getUniverseStructures(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> filter,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get structure information
    /// </summary>
    /// <remarks>
    /// Returns information on requested structure if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  --- Alternate route: &#x60;/v2/universe/structures/{structure_id}/&#x60;  --- This route is cached for up to 3600 seconds
    /// </remarks>
    /// <param name="structureId">An Eve structure ID</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="token">Access token to use if unable to set a header (optional)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseStructuresStructureId(
        int64_t structureId,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> token
    );
    /// <summary>
    /// Get system jumps
    /// </summary>
    /// <remarks>
    /// Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: &#x60;/legacy/universe/system_jumps/&#x60;  Alternate route: &#x60;/v1/universe/system_jumps/&#x60;  --- This route is cached for up to 3600 seconds
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseSystemJumps(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get system kills
    /// </summary>
    /// <remarks>
    /// Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: &#x60;/v2/universe/system_kills/&#x60;  --- This route is cached for up to 3600 seconds
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> getUniverseSystemKills(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get solar systems
    /// </summary>
    /// <remarks>
    /// Get a list of solar systems  --- Alternate route: &#x60;/dev/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/v1/universe/systems/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    pplx::task<std::vector<int32_t>> getUniverseSystems(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch
    );
    /// <summary>
    /// Get solar system information
    /// </summary>
    /// <remarks>
    /// Get information on a solar system.  --- Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/v4/universe/systems/{system_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="systemId">system_id integer</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseSystemsSystemId(
        int32_t systemId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get types
    /// </summary>
    /// <remarks>
    /// Get a list of type ids  --- Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/v1/universe/types/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="page">Which page of results to return (optional, default to 1)</param>
    pplx::task<std::vector<int32_t>> getUniverseTypes(
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<int32_t> page
    );
    /// <summary>
    /// Get type information
    /// </summary>
    /// <remarks>
    /// Get information on a type  --- Alternate route: &#x60;/dev/universe/types/{type_id}/&#x60;  Alternate route: &#x60;/v3/universe/types/{type_id}/&#x60;  --- This route expires daily at 11:05
    /// </remarks>
    /// <param name="typeId">An Eve item type ID</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="ifNoneMatch">ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> getUniverseTypesTypeId(
        int32_t typeId,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> ifNoneMatch,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Bulk names to IDs
    /// </summary>
    /// <remarks>
    /// Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- Alternate route: &#x60;/dev/universe/ids/&#x60;  Alternate route: &#x60;/legacy/universe/ids/&#x60;  Alternate route: &#x60;/v1/universe/ids/&#x60; 
    /// </remarks>
    /// <param name="names">The names to resolve</param>
    /// <param name="acceptLanguage">Language to use in the response (optional, default to en)</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    /// <param name="language">Language to use in the response, takes precedence over Accept-Language (optional, default to en)</param>
    pplx::task<std::shared_ptr<Object>> postUniverseIds(
        std::vector<utility::string_t> names,
        boost::optional<utility::string_t> acceptLanguage,
        boost::optional<utility::string_t> datasource,
        boost::optional<utility::string_t> language
    );
    /// <summary>
    /// Get names and categories for a set of IDs
    /// </summary>
    /// <remarks>
    /// Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions  --- Alternate route: &#x60;/dev/universe/names/&#x60;  Alternate route: &#x60;/v3/universe/names/&#x60; 
    /// </remarks>
    /// <param name="ids">The ids to resolve</param>
    /// <param name="datasource">The server name you would like data from (optional, default to tranquility)</param>
    pplx::task<std::vector<std::shared_ptr<Object>>> postUniverseNames(
        std::vector<int32_t> ids,
        boost::optional<utility::string_t> datasource
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_UniverseApi_H_ */

