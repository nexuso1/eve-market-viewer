/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.19.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Forbidden.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Forbidden::Forbidden()
{
    m_Error = utility::conversions::to_string_t("");
    m_Sso_status = 0;
    m_Sso_statusIsSet = false;
}

Forbidden::~Forbidden()
{
}

void Forbidden::validate()
{
    // TODO: implement validation
}

web::json::value Forbidden::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("error")] = ModelBase::toJson(m_Error);
    if(m_Sso_statusIsSet)
    {
        val[utility::conversions::to_string_t("sso_status")] = ModelBase::toJson(m_Sso_status);
    }

    return val;
}

void Forbidden::fromJson(web::json::value& val)
{
    setError(ModelBase::stringFromJson(val[utility::conversions::to_string_t("error")]));
    if(val.has_field(utility::conversions::to_string_t("sso_status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sso_status")];
        if(!fieldValue.is_null())
        {
            setSsoStatus(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Forbidden::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("error"), m_Error));
    if(m_Sso_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sso_status"), m_Sso_status));
    }
}

void Forbidden::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setError(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("error"))));
    if(multipart->hasContent(utility::conversions::to_string_t("sso_status")))
    {
        setSsoStatus(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sso_status"))));
    }
}

utility::string_t Forbidden::getError() const
{
    return m_Error;
}


void Forbidden::setError(utility::string_t value)
{
    m_Error = value;
    
}
int32_t Forbidden::getSsoStatus() const
{
    return m_Sso_status;
}


void Forbidden::setSsoStatus(int32_t value)
{
    m_Sso_status = value;
    m_Sso_statusIsSet = true;
}
bool Forbidden::ssoStatusIsSet() const
{
    return m_Sso_statusIsSet;
}

void Forbidden::unsetSso_status()
{
    m_Sso_statusIsSet = false;
}

}
}
}
}

